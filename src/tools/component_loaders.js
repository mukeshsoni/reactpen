import { transpile } from './transpile_helpers.js'
import belt from '../../belt.js'
const { isCapitalized, any } = belt
import { getSavedProps, getSavedStories } from '../persist.js'
import faker from '../faker.js'
import { formatCode } from './code_formatter.js'
import { componentJsx } from './transpile_helpers.js'

export function loadComponentsInJsx(jsxCode) {
    const js = transpile(`<div>${jsxCode}</div>`)

    if (!js.error) {
        return SystemJS.import('components.meta.json!json').then(
            componentsMetaList => {
                const customComponentTokens = js.ast.tokens.filter(token => {
                    return (
                        token.type.label === 'jsxName' &&
                        isCapitalized(token.value)
                    )
                })

                const componentsToLoad = componentsMetaList.filter(comMeta => {
                    return any(
                        token => token.value === comMeta.name,
                        customComponentTokens
                    )
                })

                const loadPromises = componentsToLoad.map(comMeta => {
                    return SystemJS.import(comMeta.path).then(com => {
                        window[comMeta.name] = com.default || com
                        return com.default || com
                    })
                })

                return Promise.all(loadPromises)
            }
        )
    } else {
        return Promise.reject({ error: js.error })
    }
}

function resetSavingPropsProperty(stories) {
    return stories.map(story => {
        return {
            ...story,
            savingProps: false
        }
    })
}

/**
 * This function takes the component object as generated by react docgen
 * and adds fakeProps and stored/saved stories for that component
 * @param {Object} com - the component object as created by react docgen
 */
export function enhanceComponent(com) {
    if (!com) {
        return {}
    }

    let enhancedComponent = {
        ...com
    }

    if (
        Object.keys(getSavedProps(com.path)) &&
        Object.keys(getSavedProps(com.path)).length > 0
    ) {
        enhancedComponent.fakeProps = getSavedProps(com.path)
    } else {
        enhancedComponent.fakeProps = faker(com.props, {
            optional: true
        })
    }

    let formattedCode = formatCode(componentJsx(enhancedComponent), {
        line: 0,
        ch: 0
    }).formattedCode.slice(1)

    if (getSavedStories(com.path) && getSavedStories(com.path).length > 0) {
        enhancedComponent.stories = resetSavingPropsProperty(
            getSavedStories(com.path)
        )
    } else {
        enhancedComponent.stories = [
            {
                jsxCode: formattedCode
            }
        ]
    }

    return enhancedComponent
}
